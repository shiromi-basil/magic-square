import java.util.InputMismatchException;
import java.util.Scanner;

/**
 * This program allows the user to enter numbers and determines whether the number square
 * that is generated out of their numbers is a magic square and/or a lu sho square.
 *
 * @author Shiromi Basil
 * @since 2019-01-14
 */

public class MagicSquare {
    /**
     * This method validates the option selected by the user.
     *
     * @return char This returns the validated option.
     */
    private static char selectValidation() {
        // Declaring a variable to hold the option selected by the user
        char select;
        do {

            // Read inputs
            Scanner user_select = new Scanner(System.in);
            // Converting the input to lower case
            select = user_select.next().toLowerCase().charAt(0);

            if (select != 'y' && select != 'n') {
                // Displaying an error message if the entered option is not valid
                System.out.println("Input invalid! Please enter 'y' or 'n'.");
            }

        } while (select != 'y' && select != 'n'); // Breaking out of the while loop if the input entered is 'y' or 'n'
        return select;
    }

    /**
     * This method validates the number entered by the user.
     *
     * @return int This returns the validated number.
     */
    private static int numberValidation() {
        // Declaring a variable to hold the number entered by the user
        int number = 0;
        do {

            try {
                // Read inputs
                Scanner user_input = new Scanner(System.in);
                number = user_input.nextInt();
                if (number < 1) {
                    // Displaying an error message if the entered number is negative
                    System.out.println("Invalid input! Please enter a number greater than or equal to 1.");
                }
            }

            // Displaying error message if a non numeric or non element character was entered
            catch (InputMismatchException ex) {
                System.out.println("Invalid input! Please enter a number greater than or equal to 1.");
            }

        } while (number < 1); // Breaking out of the while loop if the input is greater than or equal to one
        return number;
    }

    /**
     * This method receives the values from the user and enters them into a 2D array.
     *
     * @param size This is the size of the 2D array.
     * @return int[][] This returns the 2D array created by the values entered by the user.
     */
    private static int[][] getValues(int size) {
        // Declaring and initializing an Array to hold all the numbers entered
        int[][] numberArray = new int[size][size];
        // Declaring and initializing a variable to hold the number of the input entered
        int num = 1;

        // Iterating the loop through number of the rows
        for (int row = 0; row < size; row++) {
            // Iterating the loop through number of the columns
            for (int column = 0; column < size; column++) {

                System.out.print("Enter number " + num + ": ");
                // Calling the numberValidation method to validate every number entered
                int numberInput = numberValidation();
                // Storing the validated in the array
                numberArray[row][column] = numberInput;
                ++num; // Incrementing the number of the input entered in each loop
            }
        }
        return numberArray;
    }

    /**
     * This method displays the number square generated by the numbers input by the user.
     *
     * @param numberArray This is a 2D array which consists the numbers entered by the user.
     */
    private static void displaySquare(int[][] numberArray) {
        System.out.println("Do you want to display the number square?: (Enter 'y' for yes and 'n' for no)");
        // Calling the selectValidation method to validate the option selected by the user
        char selection = selectValidation();
        if (selection == 'y') {

            System.out.println("Your number square: ");
            // Iterating the loop through number of rows and columns
            for (int[] ints : numberArray) {
                // Same array length for column and row because this is a sqaure matrix
                for (int column = 0; column < numberArray.length; column++) {

                    // Displaying every element of the row with a space in between them
                    System.out.print(ints[column] + " ");
                }
                System.out.println(); // Creating a new line to display the elements of the next row
            }
        }
    }

    /**
     * This is method checks whether the number square generated by the user is a magic square.
     *
     * @param numberArray This is 2D array which consists the numbers entered by the user.
     * @return boolean This returns true if the number square generated by the user is a magic square.
     */
    private static boolean magicSquare(int[][] numberArray) {
        // Declaring and initializing an Array to hold all the sum of the numbers entered
        int total = 0;
        // Declaring and initializing an Array to hold the boolean whether the number square is a magic square or not
        boolean magicSquare = true;

        // Iterating a loop to find the sum of the leading diagonal
        for (int diagonal = 0; diagonal < numberArray.length; diagonal++) {
            total += numberArray[diagonal][diagonal]; // Sum of the diagonal is stored in the variable
        }

        // Iterating a loop to find the sum of the row
        for (int[] ints : numberArray) {
            int rowTotal = 0; // Variable to hold the sum of every row
            for (int column = 0; column < numberArray.length; column++) {
                rowTotal += ints[column];
            }
            // Checking whether the sum of the diagonal and the row total is equal
            if (rowTotal != total) {
                magicSquare = false; //
            }
        }

        // Iterating a loop to find the sum of the column
        for (int column = 0; column < numberArray.length; column++) {
            int columnTotal = 0; // Variable to hold the sum of every column
            for (int row = 0; row < numberArray.length; row++) {
                columnTotal += numberArray[row][column];
            }

            // Checking whether the sum of the diagonal and the column total is equal
            if (columnTotal != total) {
                magicSquare = false;
            }
        }

        // Displaying the results - whether or not the number square entered is magic square
        if (magicSquare) {
            System.out.println("Is magic square: True");
        } else {
            System.out.println("Is magic square: False");
        }
        return magicSquare;
    }

    /**
     * This is method checks whether the number square generated by the user is a Lo Shu square.
     *
     * @param numberArray This is 2D array which consists the numbers entered by the user.
     * @param magicSquare This specifies if the number square generated is a magic square.
     */
    private static void loShuSquare(int[][] numberArray, boolean magicSquare, int size) {
        // Declaring and initializing an Array to hold the boolean whether the number square is a magic square or not
        boolean loShuSquare = true;

        // Checking if the number square has only have 3 rows and 3 columns
        if (size == 3) {
            // Iterating the loop through the rows and columns
            for (int row = 0; row < numberArray.length; row++) {
                for (int column = 0; column < numberArray.length; column++) {

                    if (numberArray[row][column] <= 9) { // Checking if all the numbers entered are less than 10

                        // Iterating the loop through the rows and column again
                        for (int rowS = 0; rowS < numberArray.length; rowS++) {
                            for (int columnS = 0; columnS < numberArray.length; columnS++) {

                                if (numberArray[row][column] == numberArray[rowS][columnS]) { // Checking for duplicates of an element
                                    if (row != rowS && column != columnS) { // Declaring the element as a duplicate only if their indexes don't match
                                        loShuSquare = false;
                                    }
                                }
                            }
                        }

                    } else {
                        loShuSquare = false;
                    }
                }
            }
        } else {
            loShuSquare = false;
        }

        // Displaying the results - whether or not the number square entered is Lo Shu square
        if (magicSquare && loShuSquare) {
            System.out.println("Is Lo Shu square: True\n");
        } else {
            System.out.println("Is Lo Shu square: False\n");
        }
    }

    /**
     * This is method verifies if the user wants to enter a new number square.
     *
     * @param iteration This is the variable on which the program's iteration depends.
     * @return int This returns if the user wants to enter a new square.
     */
    private static int programIteration(int iteration) {
        System.out.println("Do you wish to enter a new number square?: (Enter 'y' for yes and 'n' for no)");
        // Calling the selectValidation method to validate the option selected by the user
        char answer = selectValidation();
        if (answer == 'n') {

            // Terminating the program when the user enters no
            System.out.println("Program Terminated. \nThank you!");
            iteration = 1; // Changing the value of the variable so that the iteration of the main program is terminated
        }
        return iteration;
    }

    /**
     * This is the main method which makes use of other methods.
     *
     * @param args An array of command-line arguments for the program.
     */
    public static void main(String[] args) {
        int iteration = 0; // Variable to iterate the program
        do {
            System.out.println("\n------Welcome to the program------");

            System.out.println("Do you want to play this game?: (Enter 'y' for yes and 'n' for no)");
            char option = selectValidation(); // Calling the selectValidation method to validate the option selected by the user

            if (option == 'y') {

                System.out.println("Please enter the size of the number square you want to create: ");
                int size = numberValidation(); // Reading and validating the size of the loop

                int[][] numberSquare = getValues(size); // Reading and validating values entered by the user to generate a number square
                displaySquare(numberSquare); // Displaying the number square generated by the inputs entered by the user

                // Displaying the results
                System.out.println("\nThis is a " + size + " * " + size + " number square."); // Displaying the size of number square generated by the user
                boolean magicSquareValidation = magicSquare(numberSquare); //  Validating whether the number square is a magic square
                loShuSquare(numberSquare, magicSquareValidation, size); // Validating whether the number square is Lo Shu square

                iteration = programIteration(iteration); // Reading and validating the input entered by the user regarding the program's iteration

            } else {
                System.out.println("Program terminated. \nThank you!");
                iteration = 1; // terminating the while loop of the main program
            }
        } while (iteration != 1);
    }
}
